// Generated by CoffeeScript 1.6.2
(function() {
  var Room, Rooms, Servers, rooms, servers, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Servers = (function(_super) {
    __extends(Servers, _super);

    function Servers() {
      this.connect = __bind(this.connect, this);      Servers.__super__.constructor.apply(this, arguments);
      this.connect();
    }

    Servers.prototype.connect = function() {
      var websocket, wsServer,
        _this = this;

      wsServer = 'ws://mycard-server.my-card.in:9998';
      websocket = new WebSocket(wsServer);
      websocket.onopen = function() {
        console.log("websocket: Connected to WebSocket server.");
        return Room.deleteAll();
      };
      websocket.onclose = function(evt) {
        $('#rooms').html('大厅连接中断, ');
        $('<a />', {
          id: 'reconnect',
          text: '重新连接'
        }).appendTo($('#rooms'));
        $('#reconnect').click(_this.connect);
        return console.log("websocket: Disconnected");
      };
      websocket.onmessage = function(evt) {
        var room, rooms, _i, _len;

        rooms = JSON.parse(evt.data);
        for (_i = 0, _len = rooms.length; _i < _len; _i++) {
          room = rooms[_i];
          if (room._deleted) {
            if (Room.exists(room.id)) {
              Room.find(room.id).destroy();
            }
          }
        }
        return Room.refresh((function() {
          var _j, _len1, _results;

          _results = [];
          for (_j = 0, _len1 = rooms.length; _j < _len1; _j++) {
            room = rooms[_j];
            if (!room._deleted) {
              _results.push($.extend({
                ip: '127.0.0.1',
                player1: (room.users.length ? room.users[0].name : void 0),
                player2: (room.status === 'wait' ? '等待中' : '已开始'),
                port: 10800,
                name: '',
                ping: '-'
              }, room));
            }
          }
          return _results;
        })());
      };
      return websocket.onerror = function(evt) {
        return console.log('websocket: Error occured: ' + evt.data);
      };
    };

    return Servers;

  })(Spine.Controller);

  Room = (function(_super) {
    __extends(Room, _super);

    function Room() {
      _ref = Room.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Room.configure("Room", "name", "status", "ip", "port");

    return Room;

  })(Spine.Model);

  Rooms = (function(_super) {
    __extends(Rooms, _super);

    Rooms.prototype.events = {
      'click .room': 'clicked'
    };

    function Rooms() {
      this.render = __bind(this.render, this);      Rooms.__super__.constructor.apply(this, arguments);
      Room.bind("refresh", this.render);
    }

    Rooms.prototype.render = function() {
      $('#rooms_table').dataTable().fnClearTable();
      return $('#rooms_table').dataTable().fnAddData(Room.all());
    };

    Rooms.prototype.clicked = function(e) {
      var room;

      room = $(e.target).tmplItem().data;
      return console.log(room);
    };

    return Rooms;

  })(Spine.Controller);

  rooms = new Rooms({
    el: '#rooms'
  });

  servers = new Servers();

  $('#rooms_table').dataTable({
    aoColumns: [
      {
        sTitle: '玩家',
        mData: 'player1'
      }, {
        sTitle: '状态',
        mData: 'player2'
      }, {
        sTitle: 'IP',
        mData: 'ip'
      }, {
        sTitle: '端口',
        mData: 'port'
      }, {
        sTitle: '说明',
        mData: 'name'
      }, {
        sTitle: 'Ping',
        mData: 'ping'
      }
    ],
    aaSorting: [[1, 'desc'], [5, 'asc']]
  });

  $('#rooms_table tbody tr').live('click', function() {
    var row;

    return row = $('td', this);
  });

  $('#login').submit(function() {
    $('#candy').show();
    Candy.init('http://my-card.in:5280/http-bind/', {
      core: {
        debug: false,
        autojoin: ['shinkirou@conference.my-card.in']
      },
      view: {
        language: 'cn',
        resources: 'js/vendor/candy/res/'
      }
    });
    Candy.Core.connect(this.name.value + '@my-card.in', this.password.value);
    return false;
  });

}).call(this);
